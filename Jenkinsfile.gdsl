pipeline {
    agent any
    tools {
        maven 'maven'
        nodejs 'Node20170'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        VERSION_NUMBER = "1.0.${BUILD_NUMBER}"
        FRONTEND_IMAGE = 'my-react-app'
        BACKEND_IMAGE = 'my-springboot-app'
        ACR_NAME = 'acrd92taz5e.azurecr.io'
        VM_USER = 'adminuser'
        VM_NAME = 'vm-jumpbox'
        RESOURCE_GROUP = 'rg-private-aks-acr'
        BASTION_NAME = 'bastion-host'
        SSH_KEY = ' /root/.ssh/id_rsa'
        LOCAL_PORT = '5001'

    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Install Backend Dependencies') {
            steps {
                echo 'Installing backend dependencies using Maven...'
                dir('backend') {
                    sh 'mvn clean install -DskipTests'
                }
            }
        }
//        stage('Code Analysis with SonarQube') {
//            steps {
//                withSonarQubeEnv('sonar-server') {
//                    sh '''
//                    $SCANNER_HOME/bin/sonar-scanner \
//                    -Dsonar.projectName=backend \
//                    -Dsonar.java.binaries=. \
//                    -Dsonar.projectKey=backend
//                    '''
//                }
//            }
//        }
//        stage('Generation de BOM') {
//            steps {
//                echo 'Generating BOM for backend...'
//                dir('backend') {
//                    sh 'mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom'
//                }
//            }
//        }
//        stage('Dependency-Track Analysis') {
//            steps {
//                echo 'Uploading BOM to Dependency-Track...'
//                withCredentials([string(credentialsId: 'DTToken', variable: 'API_KEY')]) {
//                    dependencyTrackPublisher artifact: 'backend/target/bom.json',
//                            projectId: '725d881c-3311-4afb-a474-0c7d2fc6e8ef',
//                            projectVersion: VERSION_NUMBER,
//                            synchronous: false,
//                            dependencyTrackApiKey: API_KEY
//                }
//            }
//        }
        stage('Build JAR') {
            steps {
                sh 'cd backend && mvn clean package'
                sh 'ls -l backend/target/demo-0.0.1-SNAPSHOT.jar'
            }
        }
        stage('Docker Build, Save, and Compress') {
            steps {
                script {
                    echo 'Building and compressing Docker images...'
                    sh '''
                    docker build -t $FRONTEND_IMAGE:$VERSION_NUMBER /var/jenkins_home/workspace/MyFirstPipline/react-frontend/
                    docker build -t $BACKEND_IMAGE:$VERSION_NUMBER /var/jenkins_home/workspace/MyFirstPipline/backend/
                    
                    docker save -o frontend.tar $FRONTEND_IMAGE:$VERSION_NUMBER
                    docker save -o backend.tar $BACKEND_IMAGE:$VERSION_NUMBER
                    
                    # Compress images before transfer
                    tar -czvf frontend.tar.gz frontend.tar
                    tar -czvf backend.tar.gz backend.tar
                    '''
                }
            }
        }

        stage('Transfer Compressed Docker Images to VM') {
            steps {
                script {
                    echo 'Starting transfer of compressed Docker images to Jumpbox VM over Bastion...'

                    def vmResourceId = sh(script: "az vm show --name $VM_NAME --resource-group $RESOURCE_GROUP --query id --output tsv", returnStdout: true).trim()

                    sh """
                    echo "Creating Bastion tunnel..."
                    az network bastion tunnel --name $BASTION_NAME \
                        --resource-group $RESOURCE_GROUP \
                        --target-resource-id $vmResourceId \
                        --resource-port 22 \
                        --port $LOCAL_PORT &

                    sleep 10  # Wait for the tunnel to establish
                    """

                    sh """
                    echo "Transferring compressed images..."
                    scp -C -o StrictHostKeyChecking=no -P $LOCAL_PORT -i $SSH_KEY frontend.tar.gz $VM_USER@127.0.0.1:
                    scp -C -o StrictHostKeyChecking=no -P $LOCAL_PORT -i $SSH_KEY backend.tar.gz $VM_USER@127.0.0.1:
                    """

//                    sh """
//                    echo "Closing Bastion tunnel..."
//                    kill \$(lsof -t -i:$LOCAL_PORT)  # Kill the tunnel process
//                    """
                }
            }
        }

        stage('Decompress and Push Images to ACR from VM') {
            steps {
                script {
                    echo 'Decompressing and pushing Docker images to ACR from Jumpbox...'
                    sh '''
            echo "Retrieving private IP of the VM..."
            VM_IP=$(az vm show --name $VM_NAME --resource-group $RESOURCE_GROUP --query privateIps --output tsv)
            echo "VM IP is: $VM_IP"

            echo "Using az network bastion ssh to log in to the Jumpbox VM..."

            az network bastion ssh --name $BASTION_NAME \
                --resource-group $RESOURCE_GROUP \
                --target-resource-id $(az vm show --name $VM_NAME --resource-group $RESOURCE_GROUP --query id --output tsv) \
                --auth-type ssh-key --username $VM_USER --ssh-key $SSH_KEY << EOF

                echo "Decompressing Docker images..."
                tar -xzvf frontend.tar.gz
                tar -xzvf backend.tar.gz

                echo "Loading frontend Docker image..."
                sudo docker load -i frontend.tar

                echo "Loading backend Docker image..."
                sudo docker load -i backend.tar

                echo "Logging in to Azure Container Registry..."
                sudo az acr login --name $ACR_NAME
                
                echo "Tagging frontend image..."
                sudo docker tag $FRONTEND_IMAGE:$VERSION_NUMBER $ACR_NAME/$FRONTEND_IMAGE:$VERSION_NUMBER

                echo "Tagging backend image..."
                sudo docker tag $BACKEND_IMAGE:$VERSION_NUMBER $ACR_NAME/$BACKEND_IMAGE:$VERSION_NUMBER

                echo "Pushing frontend image to ACR..."
                sudo docker push $ACR_NAME/$FRONTEND_IMAGE:$VERSION_NUMBER

                echo "Pushing backend image to ACR..."
                sudo docker push $ACR_NAME/$BACKEND_IMAGE:$VERSION_NUMBER

                echo "Images pushed to ACR successfully."
                
                EOF
            '''
                }
            }
        }
    }
}